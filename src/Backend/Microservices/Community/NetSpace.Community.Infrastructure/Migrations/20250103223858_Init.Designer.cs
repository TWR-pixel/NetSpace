// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetSpace.Community.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NetSpace.Community.Infrastructure.Migrations
{
    [DbContext(typeof(NetSpaceDbContext))]
    [Migration("20250103223858_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommunityEntityUserEntity", b =>
                {
                    b.Property<Guid>("CommunitySubscribersId")
                        .HasColumnType("uuid");

                    b.Property<int>("CommunitySubscriptionsId")
                        .HasColumnType("integer");

                    b.HasKey("CommunitySubscribersId", "CommunitySubscriptionsId");

                    b.HasIndex("CommunitySubscriptionsId");

                    b.ToTable("CommunityEntityUserEntity");
                });

            modelBuilder.Entity("NetSpace.Community.Domain.Community.CommunityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastNameUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("NetSpace.Community.Domain.CommunityPost.CommunityPostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("CommunityPosts");
                });

            modelBuilder.Entity("NetSpace.Community.Domain.CommunityPostUserComment.CommunityPostUserCommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CommunityPostId")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommunityPostId");

                    b.HasIndex("OwnerId");

                    b.ToTable("CommunityPostUserComments");
                });

            modelBuilder.Entity("NetSpace.Community.Domain.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("Hometown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalSite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CommunityEntityUserEntity", b =>
                {
                    b.HasOne("NetSpace.Community.Domain.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("CommunitySubscribersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetSpace.Community.Domain.Community.CommunityEntity", null)
                        .WithMany()
                        .HasForeignKey("CommunitySubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetSpace.Community.Domain.Community.CommunityEntity", b =>
                {
                    b.HasOne("NetSpace.Community.Domain.User.UserEntity", "Owner")
                        .WithMany("CreatedCommunities")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NetSpace.Community.Domain.CommunityPost.CommunityPostEntity", b =>
                {
                    b.HasOne("NetSpace.Community.Domain.Community.CommunityEntity", "Community")
                        .WithMany("CommunityPosts")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");
                });

            modelBuilder.Entity("NetSpace.Community.Domain.CommunityPostUserComment.CommunityPostUserCommentEntity", b =>
                {
                    b.HasOne("NetSpace.Community.Domain.CommunityPost.CommunityPostEntity", "CommunityPost")
                        .WithMany("UserComments")
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetSpace.Community.Domain.User.UserEntity", "Owner")
                        .WithMany("CommunityPostUserComments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityPost");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NetSpace.Community.Domain.Community.CommunityEntity", b =>
                {
                    b.Navigation("CommunityPosts");
                });

            modelBuilder.Entity("NetSpace.Community.Domain.CommunityPost.CommunityPostEntity", b =>
                {
                    b.Navigation("UserComments");
                });

            modelBuilder.Entity("NetSpace.Community.Domain.User.UserEntity", b =>
                {
                    b.Navigation("CommunityPostUserComments");

                    b.Navigation("CreatedCommunities");
                });
#pragma warning restore 612, 618
        }
    }
}
